# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-48MYB7j14xUYGZKq5WwaVcZLQfGi8wT
"""

import pandas as pd
import json

books = pd.read_csv('books.csv')
tags = pd.read_csv('tags.csv')
book_tags = pd.read_csv('book_tags.csv')
print(books.columns.values)


selected_genres = [("Non-Fiction", ["non-fiction", "nonfiction"]),
("Fantasy", ["fantasy"]),
("Sci-fi", ["sci-fi", "science-fiction","scifi","sf"]),
("Outer Space", ["space"]),
("Futuristic", ["futur"]),
("Action", ["action"]),
("Adventure", ["adventure"]),
("Epic", ["epic"]),
("Adult", ["adult"]),
("Young Adult", ["young-adult", "youngadult", "ya"]),
("Teens", ["teen"]),
("Children's", ["children", "kids"]),
("Fairy Tales", ["fairy"]),
("Contemporary", ["contemporary"]),
("Modern", ["modern"]),
("Romance", ["romance", "romantic"]),
("Mystery", ["myst"]),
("Detective", ["detect"]),
("Thriller", ["thriller"]),
("Drama", ["drama"]),
("Paranormal", ["paranormal"]),
("Supernatural", ["super"]),
("Magic", ["magic"]),
("Classic", ["classic"]),
("Historical", ["histor"]),
("War", ["ww"]),
("American", ["america", "usa"]),
("British", ["british", "england"]),
("Suspense", ["suspense"]),
("Horror", ["horror"]),
("Murder", ["murder"]),
("Dark", ["dark"]),
("Psychological", ["psychological"]),
("Comedy", ["humor", "humour", "funny", "comedy"]),
("Satire", ["satire"]),
("Family", ["family"]),
("Crime", ["crime"]),
("Biographies", ["bio"]),
("Memoirs", ["memoir"]),
("Inspirational", ["inspir"]),
("Speculative", ["speculative"]),
("Dystopian", ["dystop"]),
("Apocalyptic", ["apoc"]),
("Philosophy", ["philosophy"]),
("Religion", ["relig"]),
("Christian", ["christian"]),
("Spirituality", ["spirit"]),
("Self Improvement", ["self"]),
("Health", ["health"]),
("Politics", ["politic"]),
("Sociology", ["socio"]),
("Animal", ["animal"]),
("Mythology", ["myth"]),
("Graphic Novels", ["graphic-"]),
("Comics", ["comic"]),
("Manga", ["manga"]),
("Picture Books", ["picture"]),
("Poetry", ["poet"]),
("Business", ["busi"]),
("Education", ["educ"]),
("Leadership", ["leader"]),
("Music", ["music"])]


# Create the final_tags object
id = 0
ids = []
genres = []
terms_list = []
for (title, terms) in selected_genres:
  ids.append(id)
  id+=1
  genres.append(title)
  terms_list.append(terms)

final_tags = pd.DataFrame(data={'tag_id':ids, 'tag_name':genres})
print(final_tags)
print(terms_list)


book_tags = pd.read_csv('book_tags.csv')
#Genres ranked by number of books
# Generes ranked by book_tags count
counts = book_tags.groupby("tag_id")["goodreads_book_id"].size().reset_index(name='book_count')
counts = counts.sort_values(by=['book_count'], ascending=False)
join = counts.merge(tags, on = "tag_id")
tag_limited = join[:1000]

# Build up a dictionary mapping ids to be joined
merge_categories = {}
for id in final_tags["tag_id"]:
  #print(id, terms_list[id])
  # For each of the terms
  for term in terms_list[id]:
    similar_categories = list(tag_limited[tag_limited["tag_name"].str.contains(term)]["tag_id"])
    for cat_id in similar_categories:
      if  cat_id in merge_categories:
        merge_categories[cat_id].append(id)
      else:
        merge_categories[cat_id] = [id]
      #print(cat_id)
   # print()
print(merge_categories)

book_tags_list = book_tags.values.tolist()

# Build a dictionary converting goodreads_id to book_id
# create a list for the goodreads_id and the book_id
id_mapping = {}
the_goodreads_ids = list(books["goodreads_book_id"])
the_book_id = list(books["book_id"])
#print(the_goodreads_ids)
for i in range(len(the_goodreads_ids)):
  id_mapping[the_goodreads_ids[i]] = the_book_id[i]
# Iterate through the books dataframe
def get_book_id(goodreads_id):
  return id_mapping[goodreads_id]

book_tags_list = book_tags.values.tolist()

book_ids = []
tag_ids = []

for i in range(len(book_tags_list)):
  book_id = get_book_id(book_tags_list[i][0])
  tag = book_tags_list[i][1]
  if  tag in merge_categories:
    for category in merge_categories[tag]:
        book_ids.append(book_id)
        tag_ids.append(category)

# Convert these lists to a dataframe
book_tags_reduced = pd.DataFrame(data={'book_id':book_ids, 'tag_id':tag_ids})
#print(book_tags_reduced)
book_tags_reduced = book_tags_reduced.drop_duplicates(keep='first')

print(book_tags_reduced)
#for i in book_tags:
#  print(i)



def get_book_id(goodreads_id):
  return int(books[books["goodreads_book_id"] == goodreads_id]["book_id"])

print(get_book_id(1))
#books[books["goodreads_book_id"] == 1]
#books["goodreads_book_id"] == 1

# Create new_tags.json
books = final_tags[['tag_id','tag_name']]
books.columns = ['cID', 'category']
json_string = '['
i= 1
for i in books.index:
    fields=books.loc[i].to_json()
    x =  '{"model": "backend.Category","pk": \"'+str(i+1)+'\","fields":'+fields+'},'
    json_string += x
    i+=1
json_string = json_string[:-1]
json_string += ']'
df = json.loads(json_string)

with open('new_tags.json', 'w', encoding='utf-8') as f:
    json.dump(df, f, ensure_ascii=False, indent=4)

# Create new_book_tags.json
# Create new_tags.json
books = book_tags_reduced[['book_id','tag_id']]
books.columns = ['catalog_id', 'category_id']
json_string = '['
i= 1
for i in books.index:
    fields=books.loc[i].to_json()
    x =  '{"model": "backend.Category_catalogs","pk": \"'+str(i+1)+'\","fields":'+fields+'},'
    json_string += x
    i+=1
json_string = json_string[:-1]
json_string += ']'
df = json.loads(json_string)

with open('book_tags.json', 'w', encoding='utf-8') as f:
    json.dump(df, f, ensure_ascii=False, indent=4)

# Create books
books = books[['goodreads_book_id','authors','image_url','title','original_publication_year']]
books['description'] = 'Descriptions.....'
books.original_publication_year = books.original_publication_year.apply(str)
books.columns = ['bID','author','image','name','year','description']
json_string = '['
i= 1
for i in books.index:
    fields=books.loc[i].to_json()
    x =  '{"model": "backend.Catalog","pk": \"'+str(i+1)+'\","fields":'+fields+'},'
    json_string += x
    i+=1
json_string = json_string[:-1]
json_string += ']'
df = json.loads(json_string)

with open('new_books.json', 'w', encoding='utf-8') as f:
    json.dump(df, f, ensure_ascii=False, indent=4)
